/* -*- C++ -*- */
/* Generated by E:\OpenDDS-3.31.0\bin\opendds_idl version 3.31.0 (ACE version 8.0.2) running on input file DDSMessenger.idl */
#ifndef OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORTIMPL_H_3907SS
#define OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORTIMPL_H_3907SS

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 31, 0)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "DDSMessengerC.h"
#include "DDSMessengerTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSMessenger */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct DDSMessenger_Message_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<DDSMessenger_Message_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<DDSMessenger_Message_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::DDSMessenger::Message& value);

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::DDSMessenger::Message>& value);

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const KeyOnly< ::DDSMessenger::Message>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::DDSMessenger::Message& value);

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::DDSMessenger::Message>& value);

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const KeyOnly<const  ::DDSMessenger::Message>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::DDSMessenger::Message& stru);

void serialized_size(const Encoding& encoding, size_t& size, const  ::DDSMessenger::Message::_content_seq& seq);

bool operator<<(Serializer& strm, const  ::DDSMessenger::Message::_content_seq& seq);

bool operator>>(Serializer& strm,  ::DDSMessenger::Message::_content_seq& seq);

void serialized_size(const Encoding& encoding, size_t& size, const ::DDSMessenger::Message& stru);

bool operator<<(Serializer& strm, const ::DDSMessenger::Message& stru);

bool operator>>(Serializer& strm,  ::DDSMessenger::Message& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::DDSMessenger::Message>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::DDSMessenger::Message>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::DDSMessenger::Message>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::DDSMessenger::Message>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const ::DDSMessenger::Message>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::DDSMessenger::Message>& stru);

template <>
struct MarshalTraits< ::DDSMessenger::Message> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::DDSMessenger::Message&) { return false; }
  static bool from_message_block( ::DDSMessenger::Message&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSMessenger {
/// This structure supports use of std::map with one or more keys.
struct  Message_OpenDDS_KeyLessThan {
  bool operator()(const  ::DDSMessenger::Message& v1, const  ::DDSMessenger::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.subject_id < v2.subject_id) return true;
    if (v2.subject_id < v1.subject_id) return false;
    return false;
  }
};
}

namespace DDSMessenger {
class MessageTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::DDSMessenger::Message> {
  typedef  ::DDSMessenger::Message MessageType;
  typedef  ::DDSMessenger::MessageSeq MessageSequenceType;
  typedef  ::DDSMessenger::MessageSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::DDSMessenger::MessageTypeSupport TypeSupportType;
  typedef  ::DDSMessenger::MessageTypeSupportImpl TypeSupportImplType;
  typedef  ::DDSMessenger::MessageDataWriter DataWriterType;
  typedef  ::DDSMessenger::MessageDataReader DataReaderType;
  typedef  ::DDSMessenger::Message_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::DDSMessenger::Message> KeyOnlyType;
  typedef OpenDDS::DCPS::DDSMessenger_Message_xtag XtagType;

  static const char* type_name() { return "DDSMessenger::Message"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace DDSMessenger {
class  MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<Message>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<Message>
{
public:
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  Message* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const Message& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const Message& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::DDSMessenger::Message>();
bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Message::_content_seq*);

bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Message*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message::_content_seq& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicType_ptr type,  ::DDSMessenger::Message::_content_seq& value);

template <>
const  ::DDSMessenger::Message::_content_seq* get_dynamic_data_adapter_value< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicType_ptr type,  ::DDSMessenger::Message& value);

template <>
const  ::DDSMessenger::Message* get_dynamic_data_adapter_value< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Message */


/* Begin STRUCT: Heartbeat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct DDSMessenger_Heartbeat_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<DDSMessenger_Heartbeat_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<DDSMessenger_Heartbeat_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::DDSMessenger::Heartbeat& value);

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::DDSMessenger::Heartbeat>& value);

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const KeyOnly< ::DDSMessenger::Heartbeat>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::DDSMessenger::Heartbeat& value);

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::DDSMessenger::Heartbeat>& value);

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const KeyOnly<const  ::DDSMessenger::Heartbeat>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::DDSMessenger::Heartbeat& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::DDSMessenger::Heartbeat& stru);

bool operator<<(Serializer& strm, const ::DDSMessenger::Heartbeat& stru);

bool operator>>(Serializer& strm,  ::DDSMessenger::Heartbeat& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::DDSMessenger::Heartbeat>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::DDSMessenger::Heartbeat>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::DDSMessenger::Heartbeat>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::DDSMessenger::Heartbeat>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const ::DDSMessenger::Heartbeat>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::DDSMessenger::Heartbeat>& stru);

template <>
struct MarshalTraits< ::DDSMessenger::Heartbeat> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(8);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::DDSMessenger::Heartbeat&) { return false; }
  static bool from_message_block( ::DDSMessenger::Heartbeat&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSMessenger {
/// This structure supports use of std::map with one or more keys.
struct  Heartbeat_OpenDDS_KeyLessThan {
  bool operator()(const  ::DDSMessenger::Heartbeat& v1, const  ::DDSMessenger::Heartbeat& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.use_id < v2.use_id) return true;
    if (v2.use_id < v1.use_id) return false;
    return false;
  }
};
}

namespace DDSMessenger {
class HeartbeatTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::DDSMessenger::Heartbeat> {
  typedef  ::DDSMessenger::Heartbeat MessageType;
  typedef  ::DDSMessenger::HeartbeatSeq MessageSequenceType;
  typedef  ::DDSMessenger::HeartbeatSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::DDSMessenger::HeartbeatTypeSupport TypeSupportType;
  typedef  ::DDSMessenger::HeartbeatTypeSupportImpl TypeSupportImplType;
  typedef  ::DDSMessenger::HeartbeatDataWriter DataWriterType;
  typedef  ::DDSMessenger::HeartbeatDataReader DataReaderType;
  typedef  ::DDSMessenger::Heartbeat_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::DDSMessenger::Heartbeat> KeyOnlyType;
  typedef OpenDDS::DCPS::DDSMessenger_Heartbeat_xtag XtagType;

  static const char* type_name() { return "DDSMessenger::Heartbeat"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace DDSMessenger {
class  HeartbeatTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<Heartbeat>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<Heartbeat>
{
public:
  typedef HeartbeatTypeSupport TypeSupportType;
  typedef HeartbeatTypeSupport::_var_type _var_type;
  typedef HeartbeatTypeSupport::_ptr_type _ptr_type;

  HeartbeatTypeSupportImpl() {}
  virtual ~HeartbeatTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  Heartbeat create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const Heartbeat& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const Heartbeat& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, Heartbeat_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, Heartbeat_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static HeartbeatTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct< ::DDSMessenger::Heartbeat>();
bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Heartbeat*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Heartbeat& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicType_ptr type,  ::DDSMessenger::Heartbeat& value);

template <>
const  ::DDSMessenger::Heartbeat* get_dynamic_data_adapter_value< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Heartbeat */

/* End MODULE: DDSMessenger */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORTIMPL_H_3907SS */
