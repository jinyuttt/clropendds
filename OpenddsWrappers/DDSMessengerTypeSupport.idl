/* Generated by E:\OpenDDS-3.31.0\bin\opendds_idl version 3.31.0 (ACE version 8.0.2) running on input file DDSMessenger.idl */
#ifndef OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORT_IDL_LCO81O
#define OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORT_IDL_LCO81O
#define __OPENDDS_IDL_HAS_FIXED
#include "DDSMessenger.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"
#include "dds/DdsDynamicData.idl"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSMessenger */



/* Begin STRUCT: Message */

module DDSMessenger {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ
#pragma DCPS_DATA_SEQUENCE_TYPE "DDSMessenger::MessageSeq"
typedef sequence< ::DDSMessenger::Message> MessageSeq;

/** Support topic registration for Message data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface MessageTypeSupport : OpenDDS::DCPS::TypeSupport {
#ifndef OPENDDS_SAFETY_PROFILE
    // TODO: valuetype isn't supported in Java.
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_sample_rc(inout  ::DDSMessenger::Message dst, in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
     ::DDSMessenger::Message create_sample(in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_dynamic_sample_rc(inout ::DDS::DynamicData dst, in  ::DDSMessenger::Message src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::DynamicData create_dynamic_sample(in  ::DDSMessenger::Message src);
#endif

    ::DDS::ReturnCode_t encode_to_string(in  ::DDSMessenger::Message sample, out string encoded, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t encode_to_bytes(in  ::DDSMessenger::Message sample, out ::DDS::OctetSeq encoded, in OpenDDS::DCPS::RepresentationFormat format);

    ::DDS::ReturnCode_t decode_from_string(in string encoded, out  ::DDSMessenger::Message sample, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t decode_from_bytes(in ::DDS::OctetSeq encoded, out  ::DDSMessenger::Message sample, in OpenDDS::DCPS::RepresentationFormat format);
};

/** DataWriter interface for Message data type.
 *
 * See the DDS specifications, OMG formal/2015-04-10 and formal/07-01-01,
 * for a description of this interface.
 */
local interface MessageDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in  ::DDSMessenger::Message instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in  ::DDSMessenger::Message instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in  ::DDSMessenger::Message instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in  ::DDSMessenger::Message instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in  ::DDSMessenger::Message instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in  ::DDSMessenger::Message instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in  ::DDSMessenger::Message instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in  ::DDSMessenger::Message instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::DDSMessenger::Message key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::DDSMessenger::Message instance_data);
};

/** DataReader interface for Message data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface MessageDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout MessageSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout MessageSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout  ::DDSMessenger::Message received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout  ::DDSMessenger::Message received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout MessageSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout MessageSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout MessageSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::DDSMessenger::Message key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::DDSMessenger::Message instance_data);
};
};

/* End STRUCT: Message */


/* Begin STRUCT: Heartbeat */

module DDSMessenger {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ
#pragma DCPS_DATA_SEQUENCE_TYPE "DDSMessenger::HeartbeatSeq"
typedef sequence< ::DDSMessenger::Heartbeat> HeartbeatSeq;

/** Support topic registration for Heartbeat data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface HeartbeatTypeSupport : OpenDDS::DCPS::TypeSupport {
#ifndef OPENDDS_SAFETY_PROFILE
    // TODO: valuetype isn't supported in Java.
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_sample_rc(inout  ::DDSMessenger::Heartbeat dst, in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
     ::DDSMessenger::Heartbeat create_sample(in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_dynamic_sample_rc(inout ::DDS::DynamicData dst, in  ::DDSMessenger::Heartbeat src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::DynamicData create_dynamic_sample(in  ::DDSMessenger::Heartbeat src);
#endif

    ::DDS::ReturnCode_t encode_to_string(in  ::DDSMessenger::Heartbeat sample, out string encoded, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t encode_to_bytes(in  ::DDSMessenger::Heartbeat sample, out ::DDS::OctetSeq encoded, in OpenDDS::DCPS::RepresentationFormat format);

    ::DDS::ReturnCode_t decode_from_string(in string encoded, out  ::DDSMessenger::Heartbeat sample, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t decode_from_bytes(in ::DDS::OctetSeq encoded, out  ::DDSMessenger::Heartbeat sample, in OpenDDS::DCPS::RepresentationFormat format);
};

/** DataWriter interface for Heartbeat data type.
 *
 * See the DDS specifications, OMG formal/2015-04-10 and formal/07-01-01,
 * for a description of this interface.
 */
local interface HeartbeatDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in  ::DDSMessenger::Heartbeat instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in  ::DDSMessenger::Heartbeat instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in  ::DDSMessenger::Heartbeat instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in  ::DDSMessenger::Heartbeat instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in  ::DDSMessenger::Heartbeat instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in  ::DDSMessenger::Heartbeat instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in  ::DDSMessenger::Heartbeat instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in  ::DDSMessenger::Heartbeat instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::DDSMessenger::Heartbeat key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::DDSMessenger::Heartbeat instance_data);
};

/** DataReader interface for Heartbeat data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface HeartbeatDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout HeartbeatSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout HeartbeatSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout  ::DDSMessenger::Heartbeat received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout  ::DDSMessenger::Heartbeat received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout HeartbeatSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout HeartbeatSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout HeartbeatSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::DDSMessenger::Heartbeat key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::DDSMessenger::Heartbeat instance_data);
};
};

/* End STRUCT: Heartbeat */

/* End MODULE: DDSMessenger */
#endif /* OPENDDS_IDL_GENERATED_DDSMESSENGERTYPESUPPORT_IDL_LCO81O */
