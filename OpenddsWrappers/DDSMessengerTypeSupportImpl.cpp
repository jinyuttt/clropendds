/* Generated by E:\OpenDDS-3.31.0\bin\opendds_idl version 3.31.0 (ACE version 8.0.2) running on input file DDSMessenger.idl */
#include "DDSMessengerTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#ifndef OPENDDS_SAFETY_PROFILE
  #include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#endif
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_ddsmessengertypesupportimpl_cpp_8heqr1##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSMessenger */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<DDSMessenger_Message_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(186, 199, 94, 61, 173, 247, 238, 206, 159, 84, 232, 80, 69, 57));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<DDSMessenger_Message_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::DDSMessenger::Message& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"from",0},{"subject",1},{"subject_id",2},{"text",3},{"content",4},{"domain_id",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.from = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.subject = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.subject_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.text = x.c_str();
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_sequence(XTypes::TK_BYTE)) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
       OpenDDS::DCPS::grow(value.content);
        if (!value_reader.begin_element()) return false;
        if (!value_reader.read_byte(value.content[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    case 5: {
      if (!value_reader.read_int32(value.domain_id)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::DDSMessenger::Message>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"subject_id",2},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 2: {
      if (!value_reader.read_int32(value.value.subject_id)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const KeyOnly< ::DDSMessenger::Message>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"subject_id",2},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 2: {
      if (!value_reader.read_int32(value.value.subject_id)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::DDSMessenger::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "from", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.from)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "subject", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.subject)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, true, "subject_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.subject_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "text", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.text)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "content", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_sequence(XTypes::TK_BYTE, static_cast<ACE_CDR::ULong>(value.content.length()))) {
        return false;
      }
      if (!value_writer.write_byte_array (value.content.get_buffer(), static_cast<ACE_CDR::ULong>(value.content.length()))) {
        return false;
      }
      if (!value_writer.end_sequence()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "domain_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.domain_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::DDSMessenger::Message>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(2, true, "subject_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.subject_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const KeyOnly<const  ::DDSMessenger::Message>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(2, true, "subject_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.subject_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::DDSMessenger::Message& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.from = "";
  stru.subject = "";
  stru.subject_id = 0;
  stru.text = "";
  stru.content.length(0);
  stru.domain_id = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::DDSMessenger::Message::_content_seq& seq)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(seq);
  primitive_serialized_size_ulong(encoding, size);
  if (seq.length() == 0) {
    return;
  }
  primitive_serialized_size_octet(encoding, size, seq.length());
}

bool operator<<(Serializer& strm, const  ::DDSMessenger::Message::_content_seq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_octet_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm,  ::DDSMessenger::Message::_content_seq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > strm.length()) {
    if (DCPS_debug_level >= 8) {
      ACE_DEBUG((LM_DEBUG, ACE_TEXT("(%P|%t) Invalid sequence length (%u)\n"), length));
    }
    return false;
  }
  CORBA::ULong new_length = length;
  seq.length(new_length);
  if (length == 0) {
    return true;
  }
  return strm.read_octet_array(seq.get_buffer(), length);
}

void serialized_size(const Encoding& encoding, size_t& size, const ::DDSMessenger::Message& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  primitive_serialized_size(encoding, size, stru.subject_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  serialized_size(encoding, size, stru.content);
  primitive_serialized_size(encoding, size, stru.domain_id);
}

bool operator<<(Serializer& strm, const ::DDSMessenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.text.in())
    && (strm << stru.content)
    && (strm << stru.domain_id);
}

bool operator>>(Serializer& strm,  ::DDSMessenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.from = "";
  } else {
    if (!(strm >> stru.from.out())) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.subject = "";
  } else {
    if (!(strm >> stru.subject.out())) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.subject_id = 0;
  } else {
    if (!(strm >> stru.subject_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.text = "";
  } else {
    if (!(strm >> stru.text.out())) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.content.length(0);
  } else {
    if (!(strm >> stru.content)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.domain_id = 0;
  } else {
    if (!(strm >> stru.domain_id)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.subject_id);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.subject_id);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.subject_id = 0;
  } else {
    if (!(strm >> stru.value.subject_id)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.subject_id);
}

bool operator<<(Serializer& strm, const KeyOnly<const ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.subject_id);
}

bool operator>>(Serializer& strm, const KeyOnly< ::DDSMessenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.subject_id = 0;
  } else {
    if (!(strm >> stru.value.subject_id)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::DDSMessenger::Message>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "subject_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace DDSMessenger {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
Message* MessageTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  Message* value = new Message;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<Message>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: MessageTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<MessageTypeSupportImpl> ts_init_DDSMessenger_Message;
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::DDSMessenger_Message_xtag>();
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::DDSMessenger_Message_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::encode_to_string(const Message& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::encode_to_bytes(const Message& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::decode_from_string(const char* in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new Message;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new Message();
  return ::DDS::RETCODE_UNSUPPORTED;
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::DDSMessenger::Message> : MetaStruct {
  typedef  ::DDSMessenger::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::DDSMessenger::Message& typed = *static_cast<const ::DDSMessenger::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "domain_id") == 0) {
      return typed.domain_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Message)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "from") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'from' contents could not be skipped");
      }
    }
    if (base_field == "subject") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'subject' contents could not be skipped");
      }
    }
    if (base_field == "subject_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'subject_id' could not be skipped");
      }
    }
    if (base_field == "text") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'text' contents could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::DDSMessenger::Message::_content_seq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "domain_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain_id' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "domain_id") == 0) {
      return make_field_cmp(&T::domain_id, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", "text", "content", "domain_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "content") == 0) {
      return &static_cast<const T*>(stru)->content;
    }
    if (std::strcmp(field, "domain_id") == 0) {
      return &static_cast<const T*>(stru)->domain_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "content") == 0) {
      static_cast<T*>(lhs)->content = *static_cast<const  ::DDSMessenger::Message::_content_seq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain_id") == 0) {
      static_cast<T*>(lhs)->domain_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "domain_id") == 0) {
      return static_cast<const T*>(lhs)->domain_id == static_cast<const T*>(rhs)->domain_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::DDSMessenger::Message>()
{
  static MetaStructImpl< ::DDSMessenger::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Message::_content_seq*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(length, 1);
}

bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::DDSMessenger::Message>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq > : public DynamicDataAdapter_T< ::DDSMessenger::Message::_content_seq> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::DDSMessenger::Message::_content_seq& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Message::_content_seq>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message::_content_seq& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Message::_content_seq>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return value_.length();
  }

  DDS::MemberId get_member_id_at_index_impl(DDS::UInt32 index)
  {
    const DDS::UInt32 count = value_.length();
    if (!read_only_ && index >= count) {
      value_.length(index + 1);
      return index;
    }
    return check_index("get_member_id_at_index", index, count) == DDS::RETCODE_OK ? index : MEMBER_ID_INVALID;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size, value_);
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser << value_;
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, value_.length());
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_simple_raw_value(method, dest, tk, value_[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, value_.length());
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_simple_raw_value(method, value_[id], id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message::_content_seq& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicType_ptr type,  ::DDSMessenger::Message::_content_seq& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::DDSMessenger::Message::_content_seq* get_dynamic_data_adapter_value< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::DDSMessenger::Message,  ::DDSMessenger::Message > : public DynamicDataAdapter_T< ::DDSMessenger::Message> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::DDSMessenger::Message& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Message>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Message>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::DDSMessenger::Message> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      KeyOnly<const  ::DDSMessenger::Message> key_only(value_);
      DCPS::serialized_size(enc, size, key_only);
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::DDSMessenger::Message> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      KeyOnly<const  ::DDSMessenger::Message> key_only(value_);
      return ser << key_only;
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_s8_raw_value(method, dest, tk, value_.from, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.subject, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.subject_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.text, id);
      }
    case 4:
      {
        return get_complex_raw_value< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(method, dest, tk, value_.content, id);
      }
    case 5:
      {
        return get_simple_raw_value(method, dest, tk, value_.domain_id, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_s8_raw_value(method, value_.from.inout(), id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.subject.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.subject_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.text.inout(), id, source, tk);
      }
    case 4:
      {
        return set_direct_complex_raw_value< ::DDSMessenger::Message::_content_seq,  ::DDSMessenger::Message::_content_seq>(method, value_.content, id, source, tk);
      }
    case 5:
      {
        return set_simple_raw_value(method, value_.domain_id, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Message,  ::DDSMessenger::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicType_ptr type,  ::DDSMessenger::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Message,  ::DDSMessenger::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::DDSMessenger::Message* get_dynamic_data_adapter_value< ::DDSMessenger::Message,  ::DDSMessenger::Message>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::DDSMessenger::Message,  ::DDSMessenger::Message> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Message */


/* Begin STRUCT: Heartbeat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<DDSMessenger_Heartbeat_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(75, 244, 169, 192, 227, 112, 84, 17, 248, 172, 47, 127, 12, 158));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<DDSMessenger_Heartbeat_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::DDSMessenger::Heartbeat& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"use_id",0},{"index",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.use_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.index)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::DDSMessenger::Heartbeat>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"use_id",0},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.use_id)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const KeyOnly< ::DDSMessenger::Heartbeat>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"use_id",0},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.use_id)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::DDSMessenger::Heartbeat& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, true, "use_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.use_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "index", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.index)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::DDSMessenger::Heartbeat>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, true, "use_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.use_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const KeyOnly<const  ::DDSMessenger::Heartbeat>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, true, "use_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.use_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::DDSMessenger::Heartbeat& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.use_id = 0;
  stru.index = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::DDSMessenger::Heartbeat& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.use_id);
  primitive_serialized_size(encoding, size, stru.index);
}

bool operator<<(Serializer& strm, const ::DDSMessenger::Heartbeat& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.use_id)
    && (strm << stru.index);
}

bool operator>>(Serializer& strm,  ::DDSMessenger::Heartbeat& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.use_id = 0;
  } else {
    if (!(strm >> stru.use_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.index = 0;
  } else {
    if (!(strm >> stru.index)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.use_id);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.use_id);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.use_id = 0;
  } else {
    if (!(strm >> stru.value.use_id)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.use_id);
}

bool operator<<(Serializer& strm, const KeyOnly<const ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.use_id);
}

bool operator>>(Serializer& strm, const KeyOnly< ::DDSMessenger::Heartbeat>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.use_id = 0;
  } else {
    if (!(strm >> stru.value.use_id)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::DDSMessenger::Heartbeat>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "use_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace DDSMessenger {
::DDS::DataWriter_ptr HeartbeatTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Heartbeat> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr HeartbeatTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Heartbeat> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr HeartbeatTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Heartbeat> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Heartbeat, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
Heartbeat HeartbeatTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  Heartbeat value;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<Heartbeat>::create_sample_rc(value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: HeartbeatTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& HeartbeatTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<Heartbeat>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<HeartbeatTypeSupportImpl> ts_init_DDSMessenger_Heartbeat;
}

const OpenDDS::XTypes::TypeIdentifier& HeartbeatTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::DDSMessenger_Heartbeat_xtag>();
}

const OpenDDS::XTypes::TypeMap& HeartbeatTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::DDSMessenger_Heartbeat_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& HeartbeatTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& HeartbeatTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t HeartbeatTypeSupportImpl::encode_to_string(const Heartbeat& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t HeartbeatTypeSupportImpl::encode_to_bytes(const Heartbeat& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t HeartbeatTypeSupportImpl::decode_from_string(const char* in, Heartbeat_out param, OpenDDS::DCPS::RepresentationFormat* format)
{
  Heartbeat* out = &param;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t HeartbeatTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, Heartbeat_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = Heartbeat();
  return ::DDS::RETCODE_UNSUPPORTED;
}

HeartbeatTypeSupport::_ptr_type HeartbeatTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::DDSMessenger::Heartbeat> : MetaStruct {
  typedef  ::DDSMessenger::Heartbeat T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::DDSMessenger::Heartbeat& typed = *static_cast<const ::DDSMessenger::Heartbeat*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "use_id") == 0) {
      return typed.use_id;
    }
    if (std::strcmp(field, "index") == 0) {
      return typed.index;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Heartbeat)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "use_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'use_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'use_id' could not be skipped");
      }
    }
    if (base_field == "index") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'index' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'index' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "use_id") == 0) {
      return make_field_cmp(&T::use_id, next);
    }
    if (std::strcmp(field, "index") == 0) {
      return make_field_cmp(&T::index, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Heartbeat)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"use_id", "index", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "use_id") == 0) {
      return &static_cast<const T*>(stru)->use_id;
    }
    if (std::strcmp(field, "index") == 0) {
      return &static_cast<const T*>(stru)->index;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Heartbeat)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "use_id") == 0) {
      static_cast<T*>(lhs)->use_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "index") == 0) {
      static_cast<T*>(lhs)->index = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Heartbeat)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "use_id") == 0) {
      return static_cast<const T*>(lhs)->use_id == static_cast<const T*>(rhs)->use_id;
    }
    if (std::strcmp(field, "index") == 0) {
      return static_cast<const T*>(lhs)->index == static_cast<const T*>(rhs)->index;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::DDSMessenger::Heartbeat)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::DDSMessenger::Heartbeat>()
{
  static MetaStructImpl< ::DDSMessenger::Heartbeat> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::DDSMessenger::Heartbeat*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::DDSMessenger::Heartbeat>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat > : public DynamicDataAdapter_T< ::DDSMessenger::Heartbeat> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::DDSMessenger::Heartbeat& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Heartbeat>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::DDSMessenger::Heartbeat& value)
    : DynamicDataAdapter_T< ::DDSMessenger::Heartbeat>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::DDSMessenger::Heartbeat> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      KeyOnly<const  ::DDSMessenger::Heartbeat> key_only(value_);
      DCPS::serialized_size(enc, size, key_only);
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::DDSMessenger::Heartbeat> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      KeyOnly<const  ::DDSMessenger::Heartbeat> key_only(value_);
      return ser << key_only;
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.use_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.index, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.use_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.index, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicType_ptr type, const  ::DDSMessenger::Heartbeat& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicType_ptr type,  ::DDSMessenger::Heartbeat& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::DDSMessenger::Heartbeat* get_dynamic_data_adapter_value< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::DDSMessenger::Heartbeat,  ::DDSMessenger::Heartbeat> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Heartbeat */

/* End MODULE: DDSMessenger */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 51, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 33, 0, 4, 77, 184, 175, 142, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 106, 153, 45, 85  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  static const unsigned char to_bytes[] = { 119, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 112, 0, 217, 138, 7, 248, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 0, 181, 227, 55, 78, 11, 0, 0, 0, 2, 0, 0, 0, 33, 0, 4, 255, 171, 161, 209, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 0, 28, 178, 81, 236, 16, 0, 0, 0, 4, 0, 0, 0, 1, 0, 128, 243, 1, 0, 0, 2, 154, 3, 100, 185, 11, 0, 0, 0, 5, 0, 0, 0, 1, 0, 4, 102, 44, 191, 18  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(75, 244, 169, 192, 227, 112, 84, 17, 248, 172, 47, 127, 12, 158))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(186, 199, 94, 61, 173, 247, 238, 206, 159, 84, 232, 80, 69, 57))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

